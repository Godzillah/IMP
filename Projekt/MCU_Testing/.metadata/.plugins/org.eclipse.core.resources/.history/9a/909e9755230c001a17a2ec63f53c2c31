/**
 * author  : Maroš Orsák (xorsak02)
 * file	   : main.c
 * created : 8.11.2019
 */

#include "MK60D10.h"
#include "libs/mcg.h"
#include "libs/io.h"
#include "libs/uart.h"
#include "libs/gpio.h"
#include "libs/crc.h"
#include "rtc.h"
#include "testUtils.h"

extern void RTC_IRQHandler() {
	printf("\r\n[INFO] - RTC(SR) Register with SR_TAF_MASK is -> %x\n", RTC->SR & RTC_SR_TAF_MASK);

   if((RTC->SR & RTC_SR_TIF_MASK)== 0x01) {
       printf("[INFO] - RTC INVALID INTERRUPT.\r\n");
       printf("[INFO] - Clearing TCE, setting RTC_TSR to zero, which will implicitly clears TIF\r");
   	   RTC->SR &= 0x07;
   	   RTC->TSR = 0x00000000;
   } else if((RTC->SR & RTC_SR_TOF_MASK) == 0x02) {
	   printf("[IMPORTANT] - RTC OVERFLOW INTERRUPT.");
	   printf("[INFO] -  Clearing TCE , setting RTC_TSR to zero.");
	   RTC->SR &= 0x07;
	   RTC->TSR = 0x00000000;
   } else if((RTC->SR & RTC_SR_TAF_MASK) == 0x04) {
	   printf("[INFO] - RTC ALARM INTERRUPT\r\n");
	   printf("[IMPORTANT] - TSR register has: %ld\r\n", RTC->TSR);
	   printf("[IMPORTANT] - TAR register has: %ld\r\n", RTC->TAR);
	   printf("[IMPORTANT] - Incrementing register TAR to 5 more, next interrupt in 5 seconds.");
	   RTC->TAR += 5;
   } else {
	   printf("\r\n[ERROR] - Time invalid flag you probably did not set TSR register to zero, which implicitly clears TIF bit in SR register\n");
   }
}

int main (void) {
	MCG_FEI_BLPE();

	setTxAndRxPins();
	uart_init(TERM_PORT, 50000, 115200);

	printf("\r[INFO] - UART initialized for communication\n");
	help();

	for(;;) {
	  		while(char_present() == 0);

	  		switch(in_char()) {
	  			case '1':
	  				printf("\r[IMPORTANT] - You typed -> 1 - RTC test with incrementing tar register\n");
					printf("\r[INFO] - This example generates an interrupt every 5 seconds!");

					initRealTimeClock(0, 0);
					while(1);
				case '2':
					printf("\r[INFO] - You typed -> 2 -RTC test with overflow tar register\n");

					initRealTimeClock(0xFFFFFFF0, 0xFFFFFFF5);
					while(1);
				case '3':
					printf("\r[INFO] -You typed -> 3 - MCU buttocns test\n");
					initClockAndPins();

					while (1) {
						if ((GPIOE_PDIR & BTN_SW5) == 0) {
							GPIOA_PDOR ^= SPK;   // beep
						} else {
							GPIOA_PDOR &= ~SPK; // do not beep
						}

						if ((GPIOE_PDIR & BTN_SW3) == 0) {
							GPIOB_PDOR ^= LED_D9;                // turn on Diode 9 state
							GPIOB_PDOR ^= LED_D10;               // turn on Diode 10 state
							GPIOB_PDOR ^= LED_D11;               // turn on Diode 11 state
							GPIOB_PDOR ^= LED_D12;               // turn on Diode 12 state
						} else if ((GPIOE_PDIR & BTN_SW4) == 0){
							printf("\r\n[IMPORTANT] - You clicked on LEFT BUTTON");
						} else if ((GPIOE_PDIR & BTN_SW2) == 0) {
							printf("\r\n[IMPORTANT] - You clicked on RIGHT BUTTON");
						}
						sleep(1000);
					}
				case '4':
					printf("\r[INFO] - You typed -> 4 - CRC cards test with 16-bit\n");

					// Example of Usage
					printf("\r[INFO] - Sender, sending following data ->  {0, 1, 2, 3, 4}\n");
					uint8_t txBufferSender[] = {0, 1, 2, 3, 4};
					uint16_t checksumSender;
					uint8_t i;
					checksumSender = CRC_INIT; // Init value for CRC calculation
					for (i = 0; i < sizeof(txBufferSender); i++)
					checksumSender = culCalcCRCBySoftware(txBufferSender[i], checksumSender);

					printf("\r\n[IMPORTANT] - Sender, checksum is --> %i", checksumSender);

					// simulating receiver with not damaged data

					printf("\r[INFO] - Receiver, receive following data ->  {0, 1, 2, 3, 4}\n");
					uint8_t txBufferReceiverCorrectData[] = {0, 1, 2, 3, 4};
					uint16_t checksumReceiver;
					checksumReceiver = CRC_INIT; // Init value for CRC calculation
					for (i = 0; i < sizeof(txBufferReceiverCorrectData); i++)
					checksumReceiver = culCalcCRCBySoftware(txBufferReceiverCorrectData[i], checksumReceiver);

					printf("\r\n[IMPORTANT] - Checksum receiver is --> %i", checksumReceiver);
					printf("\r\n[IMPORTANT] - S:%i == R:%i", checksumSender, checksumReceiver);

					printf("\r\n[IMPORTANT] - Data are OK!");

					// simulating receiver with damaged data

					printf("\r[INFO] - Receiver, receive following data ->  {0, 10, 2, 3, 4}\n");
					uint8_t txBufferReceiverWrongData[] = {0, 10, 2, 3, 4};
					uint16_t checksumReceiverWrongData;
					checksumReceiverWrongData = CRC_INIT; // Init value for CRC calculation
					for (i = 0; i < sizeof(txBufferReceiverWrongData); i++)
					checksumReceiverWrongData = culCalcCRCBySoftware(txBufferReceiverWrongData[i], checksumReceiverWrongData);

					printf("\r\n[IMPORTANT] - Checksum receiver is --> %i", checksumReceiverWrongData);
					printf("\r\n[IMPORTANT] - S:%i != R:%i", checksumSender, checksumReceiverWrongData);

					printf("\r\n[IMPORTANT] - Data are not OK and we detected it!");
					while(1);
				case '5':
					printf("\r[INFO] - You typed -> 5 - CRC cards test with 32-bit\n");

					 SIM_SCGC6 |= SIM_SCGC6_CRC_MASK;

					/* Configure CRC_CTRL for 16-bit and complement read */
					CRC_BASE_PTR->CTRL    =     CRC_CTRL_FXOR_MASK;
					CRC_BASE_PTR->CTRL    &=     ~CRC_CTRL_TCRC_MASK;

					/* Write SAEJ1850 polynomial to CRC_GPOLY register - SAE J1850 CRC: X8 + X4 + X3 + X2 + 1 */
					CRC_BASE_PTR->GPOLY_ACCESS16BIT.GPOLYL    =    0x11D;

					/* Configure CRC_CTRL for seed */
					CRC_BASE_PTR->CTRL    |=     (CRC_CTRL_WAS_MASK);

					/* Seed CRC with all ones */
					//CRC_BASE_PTR->ACCESS16BIT.CRCH    =    0x0000;
					CRC_BASE_PTR->ACCESS16BIT.CRCL    =    0xFFFF;

					/* Clear seed bit to start writing data values */
					CRC_BASE_PTR->CTRL    &=     (~CRC_CTRL_WAS_MASK);

					/* Write data to CRC data register */
//					CRC_BASE_PTR->CRC                =    0xFFFFFFFF;        /* Data */

					/* Output complement of remainder */
					printf("CRC byte:\t%X   \n", (uint16_t) CRC_BASE_PTR->ACCESS16BIT.CRCL);

					/* Output remainder */
					CRC_BASE_PTR->CTRL    &=     (~CRC_CTRL_FXOR_MASK);
			        printf("CRC byte:\t%X   \n", (uint16_t) CRC_BASE_PTR->ACCESS16BIT.CRCL);


			        /* Configure CRC_CTRL for 16-bit and complement read */
					CRC_BASE_PTR->CTRL    =     CRC_CTRL_FXOR_MASK;
					CRC_BASE_PTR->CTRL    &=     ~CRC_CTRL_TCRC_MASK;

					/* Write SAEJ1850 polynomial to CRC_GPOLY register - SAE J1850 CRC: X8 + X4 + X3 + X2 + 1 */
					CRC_BASE_PTR->GPOLY_ACCESS16BIT.GPOLYL    =    0x11D;

					/* Configure CRC_CTRL for seed */
					CRC_BASE_PTR->CTRL    |=     (CRC_CTRL_WAS_MASK);

					/* Seed CRC with all ones */
					//CRC_BASE_PTR->ACCESS16BIT.CRCH    =    0x0000;
					CRC_BASE_PTR->ACCESS16BIT.CRCL    =    0x0000;

					/* Clear seed bit to start writing data values */
					CRC_BASE_PTR->CTRL    &=     (~CRC_CTRL_WAS_MASK);

					/* Write data to CRC data register */
					CRC_BASE_PTR->CRC                =    0x00000010;        /* Data */

					/* Output complement of remainder */
					printf("CRC byte:\t%X   \n", (uint16_t) CRC_BASE_PTR->ACCESS16BIT.CRCL);

					/* Output remainder */
					CRC_BASE_PTR->CTRL    &=     (~CRC_CTRL_FXOR_MASK);
					printf("CRC byte:\t%X   \n", (uint16_t) CRC_BASE_PTR->ACCESS16BIT.CRCL);

//					printf("\r\Sender with some data...\n");
					calc16CRCByHardware(0x00000000, 0x00000001);
//
//					printf("\r\nReceiver with some data...\n");
//					calc32CRCByHardware(0x0000001, 0x00000001);
//
//					printf("\r\nReceiver with some data...\n");
//					calc32CRCByHardware(0x00000011, 0x00000002);
//
//					printf("\r\nReceiver with some data...\n");
//					calc32CRCByHardware(0x00000012, 0x00000002);
//
//					printf("\r\Receiver with bad data\n");
//					calc32CRCByHardware(0x00000012, 0x00000002);
//
//					printf("\r\nReceiver with bad polynomial number\n");
//					calc32CRCByHardware(0x00000010, 0x00000003);

					while(1);
	  			default:
	  				printf("[ERROR] - You pressed not valid input '%c'\n\r", in_char());
	  				help();
	  		}
	}
	return 0;
}
