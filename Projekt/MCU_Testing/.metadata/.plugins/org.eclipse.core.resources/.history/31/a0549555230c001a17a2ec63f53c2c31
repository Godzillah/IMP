/**
 * author: unknown
 */

#include "crc.h"


uint16_t culCalcCRCBySoftware(uint8_t crcData, uint16_t crcReg) {
	uint8_t i;
	for (i = 0; i < 8; i++) {
		if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
			crcReg = (crcReg << 1) ^ CRC16_POLY;
		else
			crcReg = (crcReg << 1);
		crcData <<= 1;
	}
	return crcReg;
}
//----------------------------------------------------------------

void calc16CRCByHardware(uint32_t data, uint32_t polynomial_number) {
	/* Configure CRC_CTRL for 16-bit and complement read */
	CRC_BASE_PTR->CTRL    =     CRC_CTRL_FXOR_MASK;
	CRC_BASE_PTR->CTRL    &=     ~CRC_CTRL_TCRC_MASK;

	/* Write SAEJ1850 polynomial to CRC_GPOLY register - SAE J1850 CRC: X8 + X4 + X3 + X2 + 1 */
	CRC_BASE_PTR->GPOLY_ACCESS16BIT.GPOLYL    =    polynomial_number;

	/* Configure CRC_CTRL for seed */
	CRC_BASE_PTR->CTRL    |=     (CRC_CTRL_WAS_MASK);

	/* Seed CRC with all ones */
	//CRC_BASE_PTR->ACCESS16BIT.CRCH    =    0x0000;
	CRC_BASE_PTR->ACCESS16BIT.CRCL    =    0x0000;

	/* Clear seed bit to start writing data values */
	CRC_BASE_PTR->CTRL    &=     (~CRC_CTRL_WAS_MASK);

	/* Write data to CRC data register */
	CRC_BASE_PTR->CRC                =    data;        /* Data */

	/* Output complement of remainder */
	printf("CRC byte:\t%X   \n", (uint16_t) CRC_BASE_PTR->ACCESS16BIT.CRCL);

	/* Output remainder */
	CRC_BASE_PTR->CTRL    &=     (~CRC_CTRL_FXOR_MASK);
	printf("CRC byte:\t%X   \n", (uint16_t) CRC_BASE_PTR->ACCESS16BIT.CRCL);
}
