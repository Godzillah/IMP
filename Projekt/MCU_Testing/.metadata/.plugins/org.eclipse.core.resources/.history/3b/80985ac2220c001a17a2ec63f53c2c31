/**
 * author: unknown
 */

#include "crc.h"


uint16_t culCalcCRCBySoftware(uint8_t crcData, uint16_t crcReg) {
	uint8_t i;
	for (i = 0; i < 8; i++) {
		if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
			crcReg = (crcReg << 1) ^ CRC16_POLY;
		else
			crcReg = (crcReg << 1);
		crcData <<= 1;
	}
	return crcReg;
}
//----------------------------------------------------------------

//void calc32CRCByHardware(uint32_t data, uint32_t polynomial_number) {
//	/* Enable CRC module */
//	SIM_SCGC6 |= SIM_SCGC6_CRC_MASK;
//
//	/* Configure CRC_CTRL for 32-bit and complement read */;
//	CRC_BASE_PTR->CTRL    &=     ~CRC_CTRL_TCRC_MASK;
//
//	printf("\r\nCRC-32bit is enabled by bit set to 1 in CTRL register %i\n", CRC_BASE_PTR->CTRL & CRC_CTRLHU_TCRC_MASK);
//
//	/* Write SAEJ1850 polynomial to CRC_GPOLY register - SAE J1850 CRC: X8 + X4 + X3 + X2 + 1 */
//	CRC_BASE_PTR->GPOLY    =    polynomial_number; // 0x11D
//
//	/* Configure CRC_CTRL for seed */
//	CRC_BASE_PTR->CTRL    |=     (CRC_CTRL_WAS_MASK);
//
//	/* Seed CRC with all ones */
//	CRC_BASE_PTR->CTRL = 0x00000000;
//
//	/* Clear seed bit to start writing data values */
//	CRC_BASE_PTR->CTRL    &=     (~CRC_CTRL_WAS_MASK);
//
//	/* Write data to CRC data register */
//	CRC_BASE_PTR->CRC                =    data;        /* Data */
//
//	/* Output complement of remainder */
//	printf("\rCRC byte:(\t%X   \n", (uint32_t) CRC_BASE_PTR->CTRL);
//	printf("\rCRC byte(num):\t%ld   \n", (uint32_t) CRC_BASE_PTR->CTRL);
//
//	/* Output remainder */
//	CRC_BASE_PTR->CTRL    &=     (~CRC_CTRL_FXOR_MASK);
//	printf("\rCRC byte(hex):\t%X   \n", (uint32_t) CRC_BASE_PTR->CTRL);
//	printf("\rCRC byte(num):\t%ld   \n", (uint32_t) CRC_BASE_PTR->CTRL);
//}
