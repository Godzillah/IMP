/**
 * author  : Maroš Orsák (xorsak02)
 * file	   : main.c
 * created : 8.11.2019
 */

#include "MK60D10.h"
#include "libs/mcg.h"
#include "libs/io.h"
#include "libs/uart.h"
#include "libs/gpio.h"
#include "testUtils.h"

extern void RTC_IRQHandler() {
	printf("\r\n[INFO] - RTC(SR) Register with SR_TAF_MASK is -> %x\n", RTC->SR & RTC_SR_TAF_MASK);

   if((RTC->SR & RTC_SR_TIF_MASK)== 0x01) {
       printf("[INFO] - RTC INVALID INTERRUPT.\r\n");
   	   RTC->SR &= 0x07;  //clear TCE, or RTC_TSR can  not be written
   	   RTC->TSR = 0x00000000;  //clear TIF
   } else if((RTC->SR & RTC_SR_TOF_MASK) == 0x02) {
	   printf("[IMPORTANT] - RTC OVERFLOW INTERRUPT.");
	   RTC->SR &= 0x07;  //clear TCE, or RTC_TSR can  not be written
	   RTC->TSR = 0x00000000;  //clear TOF
   } else if((RTC->SR & RTC_SR_TAF_MASK) == 0x04) {
	   printf("[INFO] - RTC ALARM INTERRUPT\r\n");
	   printf("[IMPORTANT] - TSR register has: %ld\n", RTC->TSR);
	   printf("[IMPORTANT] - TAR register has: %ld", RTC->TAR);
	   RTC->TAR += 5;// Write new alarm value, to generate an alarm every second add 5
   } else {
	   printf("\r\n[ERROR] - Time invalid flag you probably did not est TSR register to zero, which implicitly clears TIF bit in SR register\n");
   }
}

int main (void) {

	MCG_FEI_BLPE();

	setTxAndRxPins();
	uart_init(TERM_PORT, 50000, 115200);

	printf("\r[INFO] - UART initialized for communication\n");
	help();

	for(;;) {
	  		while(char_present() == 0);

	  		switch(in_char()) {
	  			case '1':
	  				printf("\r\t[INFO] - You typed -> 1 - RTC test with incrementing tar register\n");
					printf("\r[INFO] - This example generates an interrupt every 5 seconds!\n");

					initRealTimeClock(0, 0);
					while(1);
				case '2':
					printf("\r\t[INFO] - You typed -> 2 -RTC test with overflow tar register\n");

					initRealTimeClock(0xFFFFFFF0, 0xFFFFFFF5);
					while(1);
				case '3':
					printf("\r\n\t[INFO] -You typed -> 3 - MCU buttocns test\n");
					initClockAndPins();

					while (1) {
						if ((GPIOE_PDIR & BTN_SW5) == 0) {
							GPIOA_PDOR ^= SPK;   // invert speaker state
						} else {
							GPIOA_PDOR &= ~SPK; // logic 0 on speaker port if beep is false
						}

						if ((GPIOE_PDIR & BTN_SW3) == 0) {
							GPIOB_PDOR ^= LED_D9;                // invert D9 state
							GPIOB_PDOR ^= LED_D10;               // invert D10 state
							GPIOB_PDOR ^= LED_D11;               // invert D11 state
							GPIOB_PDOR ^= LED_D12;               // invert D12 state
						} else if ((GPIOE_PDIR & BTN_SW4) == 0){
							printf("\r\n[IMPORTANT] - You clicked on LEFT BUTTON");
						} else if ((GPIOE_PDIR & BTN_SW2) == 0) {
							printf("\r\n[IMPORTANT] - You clicked on RIGHT BUTTON");
						}
						sleep(1000);
					}
					return 0;
	  			default:
	  				printf("[ERROR] - You pressed not valid input '%c'\n\r", in_char());
	  				help();
	  		}
	}
	return 0;
}
